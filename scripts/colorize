#!/usr/bin/env python3

import argparse
from contextlib import contextmanager
from pathlib import Path
import sys

try:
    from utils import match_iter
except:
    sys.path.append(str(Path(__file__).parent.joinpath('../tests')))
    from utils import match_iter

parser = argparse.ArgumentParser()
parser.add_argument(
    "--color",
    default='always',
    choices=['always', 'never'],
    help="colorize the output; can be 'always' (default if omitted) or 'never'"
)
parser.add_argument(
    "engine",
    nargs='*',
    default=None,
    help="Restrict output to this engine",
)
args = parser.parse_args()


@contextmanager
def section(name, file=sys.stdout):
    print("{:-^150}".format(name), file=file)
    yield lambda *a, **kw: print('  ', *a, file=file)


def format_match(vr, colorized=True):
    return ' | '.join((
        f'{vr.registration:<10}',
        'T' if vr.is_heuristic else 'F',
        f'{" ".join(vr.operating_system or "")!s:<13.13}',
        f'{" ".join(vr.language or "")!s:<13.13}',
        f'{" ".join(vr.labels or "")!s:<45.45}',
        f'{vr.name:>25.25}',
        vr.colorize() if colorized else vr.source,
    ))


try:
    it = match_iter(args.engine)
    colorized = args.color != 'never'
    while True:
        print(format_match(next(it), colorized=colorized))
except StopIteration as e:
    missing, errors = e.value

with section('MISSING', file=sys.stderr) as pr:
    pr(missing)

with section('FAILURES', file=sys.stderr) as pr:
    for engine, label, err in errors:
        pr("{:<15}: {:85} : {}".format(engine, label, err))
