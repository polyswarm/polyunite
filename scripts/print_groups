#!/usr/bin/env python3
import argparse
import collections
import os.path
import sys

import polyunite

sys.path.append(os.path.join(os.path.dirname(__file__), '../tests'))
from utils import read_family_fixtures  # noqa

BOLD = polyunite.utils.colors.BOLD
RESET = polyunite.utils.colors.RESET

parser = argparse.ArgumentParser("Print the polyunite inferred name and colorized ouput, grouped by scan")
parser.add_argument("--min", default=1, help="minimum number of assertions")
parser.add_argument("--max", default=None, help="maximum number of assertions")
args = parser.parse_args()

groups = collections.defaultdict(dict)

for engine, instance_id, classification in read_family_fixtures():
    groups[instance_id][engine] = classification

MIN_GROUP_SIZE = int(args.min)
MAX_GROUP_SIZE = int(args.max) if args.max else None

for instance_id, assertions in groups.items():
    if len(assertions) >= MIN_GROUP_SIZE and (MAX_GROUP_SIZE is None or len(assertions) <= MAX_GROUP_SIZE):
        analyses = polyunite.analyze(dict(assertions))

        print('{:^150}'.format(f'{BOLD}{analyses.infer_name():^15}{RESET} [{instance_id:^20}]'))

        for engine, vr in analyses.items():
            print(f'[{engine:^15}]  {vr.colorize():<100.100}')
