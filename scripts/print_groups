#!/usr/bin/env python3
import argparse
import collections
import os.path
import sys

import polyunite

sys.path.append(os.path.join(os.path.dirname(__file__), '../tests'))
from utils import read_family_fixtures  # noqa

BOLD = polyunite.utils.colors.BOLD
RESET = polyunite.utils.colors.RESET

parser = argparse.ArgumentParser("Print the polyunite inferred name and colorized ouput, grouped by scan")
parser.add_argument("--min", default=3, help="minimum number of group entries")
args = parser.parse_args()

groups = collections.defaultdict(dict)

for engine, group, classification in read_family_fixtures():
    groups[group][engine] = classification

for group, assertions in groups.items():
    min_group_size = int(args.min)
    analyses = polyunite.analyze(dict(assertions))

    if len(analyses) >= min_group_size:
        print('{:-^150}'.format(f'{BOLD}{analyses.infer_name():^15}{RESET} [{group:^20}]  '))
        print('\n'.join(f'[{engine:^15}]  {vr.colorize():<100.100}' for engine, vr in analyses.items()))
